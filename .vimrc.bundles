if &compatible
  set nocompatible
end

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'
Plugin 'gmarik/Vundle.vim'

" Bundle "Valloric/YouCompleteMe"
" Bundle "marijnh/tern_for_vim"

" Define bundles via Github repos
" vim-run-interactive让你可以在Vim中执行几乎任何你想要在命令行中执行的命令。举例
" 来说，假设你有条git update的自定义命令，你可以通过:RunInInteractiveShell git
" update来执行它，而不需要退出Vim。
" nnoremap <Leader>r :RunInInteractiveShell<space>
Bundle 'christoomey/vim-run-interactive'

Bundle 'croaky/vim-colors-github'

" 在vim内修改文件名
" :rename filename
Bundle 'danro/rename.vim'

" 在Vim中舒心 的编写、编译Coffeescript
" coffescript, 编译后变为JavaScript
" Bundle 'kchmck/vim-coffee-script'

" 快速查找项目中的文件, 同一文件夹下的文件
" ctrl + p
" esc退出
Bundle 'kien/ctrlp.vim'

" 在vim中创建文件夹, 及子文件夹
" :e this/is/a/dir/a.js
" 保存后才会在文件系统中显示
Bundle 'pbrisbin/vim-mkdir'

" 静态语法差错器, 依赖使用其他语法差错器
" 保存后才检查
Bundle 'scrooloose/syntastic'

" 语法高亮
Bundle 'slim-template/vim-slim'

" git管理插件
" :Git add %  :Gwrite Stage the current file to the index
" :Git checkout % :Gread  Revert current file to last checked in version
" :Git rm % :Gremove  Delete the current file and the corresponding Vim buffer
" :Git mv % :Gmove  Rename the current file and the corresponding Vim buffer
Bundle 'tpope/vim-fugitive'

" 对代码用符号进行包含
" 1: 把光标放在最前方的符号处 
"    cs"'     替换字符
"    cst<p>     替换标签
"    ds          删除字符 
"    dst          删除标签 
" 2: 把光标放在单词上 
"    ysiw)     用括号包围单词 
"    yss)     用括号包围一整行的内容 
"    ySS/     在该行的上下新开一行, 用字符包围
" 3: shift + v, 打开可视模式, 选中后
"    S+字符/标签
"    在上下行内进行包围
" 4: 标签进行包围时
"    写标签头, 多写属性, 标签尾还是正规的标签尾部
Bundle 'tpope/vim-surround'

" 标签化代码, 配合tagbar使用
Bundle 'vim-scripts/ctags.vim'

" 原版%能移动到匹配的()、[]、{}
" 插件扩展了功能，能匹配html、xml
Bundle 'vim-scripts/matchit.zip'

" 注释使用
" <c-_><c-_>   :: :TComment    单行注释
" <c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>  自定义注释方式，单行注释
" <c-_>b       :: :TCommentBlock    块注释
" <c-_>a       :: :TCommentAs <QUERY COMMENT TYPE>
" <c-_>n       :: :TCommentAs &filetype <QUERY COUNT>
" <c-_>s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE>
" <c-_>i       :: :TCommentInline
" <c-_>r       :: :TCommentRight
" <c-_>p       :: Comment the current inner paragraph   段落注释，没空行的就是段落
Bundle 'vim-scripts/tComment'

" 触发，<c-y>,
" ctrl y ,
" （1）：E 代表HTML标签
" （2）：E#id 代表标签E有id属性
" （3）：E.class 代表E有class属性
" （4）：E[attr=foo] 代表某个特定属性
" （5）：E{info} 代表标签E包含的内容是info
" （6）：E>N 代表N是E的子元素
" （7）：E+N 代表N是E的同级元素
" （8）：E^N 代表N是E的上级元素}]
Bundle "mattn/emmet-vim"

" 左侧文件树形结构
Bundle "scrooloose/nerdtree" 

""显示insert、normal的状态栏
Bundle "Lokaltog/vim-powerline"

" 片段
" 用ultisnip替换
" Bundle "msanders/snipmate.vim"

" js语法插件
Bundle "jelera/vim-javascript-syntax"

" html5新特性支持
Bundle "othree/html5.vim"

" 语法高亮
Bundle "xsbeats/vim-blade"

" 符号自动补全
" 被动技能
Bundle "Raimondi/delimitMate"

" 将less编译成css文件
" <leader>m
" Bundle "groenewege/vim-less"

" 语法插件
Bundle "evanmiller/nginx-vim-syntax"

" 光标前后跳转 <leader><leader>w/b
" 搜索全局跳转 <leader><leader>s
" 行级前后跳转 <leader><leader>jk/hl
" 重复跳转 <leader><leader>.
Bundle "Lokaltog/vim-easymotion"

" 颜色配置文件
Bundle "tomasr/molokai"
Bundle "altercation/vim-colors-solarized"

" 右侧函数, 变量的导航栏
Bundle 'majutsushi/tagbar'
" 快速对齐
" :Tab /=   等号对齐
" :Tab /xxx    自定义对齐
Bundle "godlygeek/tabular"

" 多行编辑
" 正常模式，多次按<c-n>选择修改的文字
" 按c进行编辑，esc退出编辑
" <c-p>向前后退选择文字，<c-x>跳过当前文字选择到下一个
" 
" 选中多行后，按<c-n>光标到第一列，按i进入多行编辑
Bundle "terryma/vim-multiple-cursors"

" sass scss haml等css开发语言支持
Bundle "tpope/vim-haml"

" css3语法高亮
Bundle "hail2u/vim-css3-syntax"

" css的补全
" 像snippet的插件，提供css、less、sass、scss的补全
" 在ultisnips文件夹中
" Bundle "rstacruz/vim-ultisnips-css"

" 窗口管理
" Bundle 'winmanager'

" Bundle "Shougo/neocomplcache.vim"

" Bundle "pangloss/vim-javascript"

" 代码格式化
" <c-f>
" Bundle "maksimr/vim-jsbeautify"

" rails集成开发套件
" 在Vim中执行Rspec测试
" ruby用的
" rails框架使用的
" Bundle 'thoughtbot/vim-rspec'
" Bundle 'tpope/vim-bundler'
" Bundle 'tpope/vim-endwise'
" Bundle 'tpope/vim-rails'
" Bundle 'vim-ruby/vim-ruby'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

filetype on
